[ { "title": "criticism-of-hegelianism", "url": "/posts/criticism-of-hegelianism/", "categories": "Philosophy, Marxism", "tags": "Criticism, Marxism", "date": "2022-11-19 10:00:43 +0800", "snippet": "Criticism of Hegelianism: “All that is real isrational; and all that is rational is real.”对于 “存在即合理” 的黑格尔主义的批判序：似乎在历史的发展过程中，哪一个哲学命题都没有像黑格尔的命题可以让其成为很大一部分人脱口而出的对现实问题的最终解，与所谓“现代社会”将一切与人相关的矛盾都归一到“人性论”相似，“存在即合理” 成为了人们对待社会现象及个人经历具体事件的最终答复，似乎人们也必须对自己的经历给出一个合理的解释，这就给黑格尔这个著名的哲学命题以生存空间。 “凡是存在的都是合理的，凡是合理的都..." }, { "title": "work-efficiency", "url": "/posts/work-efficiency/", "categories": "规划, 工作流", "tags": "efficiency", "date": "2021-02-15 16:17:50 +0800", "snippet": "如何行之有效的提高工作效率，避免完美主义，为自己保留更多可支配时间 避免完美主义，对于已经能够达成目标的任务，不再花过多时间将其 ”完美化“； 重新建立时间观念，对于工作过程中任务进度的变化尽早感知并修改当日计划，越早延期任务效果越好； 建立严格的节奏和规律，确定好抽离出工作任务的时间结点，不能因为”过于投入“而再次透支当日精力； 合理规划睡眠、起床、运动时间，尽最大可能保持长期规律性的时间节律； 使用番茄工作法，合理规划 ”投入时间“ 和 ”休息时间“，尽最大可能避免碎片化的时间分布，达到”一个时间片内“就做一件事的单线程的效果；三个避免 避免为了达到短期目的而消耗长期精力..." }, { "title": "mac-reset-smc-nvram", "url": "/posts/mac-reset-smc-nvram/", "categories": "规划, 工作流", "tags": "mac", "date": "2021-02-15 16:15:52 +0800", "snippet": "Mac 重置 SMC 和 NVRAM第一步 重置系统管理控制器(SMC) 将 Mac 关机。 将 MagSafe 或 USB-C 电源适配器连接到电源和 Mac。 在内建键盘上，按下键盘左侧的 Shift-Control-Option 键，然后同时按下电源按钮。 松开所有按键，然后再次按下电源按钮以开启 Mac。 第二步 重置非易失的随机访问存储器(NVRAM) 关闭 Mac。 在键盘上找到以下按键：Command (⌘)、Option、P 和 R。 打开 Mac。 听到启动声后立即..." }, { "title": "research-of-ergonomics", "url": "/posts/research-of-ergonomics/", "categories": "规划, 问题研究", "tags": "ergonomics", "date": "2021-02-15 16:09:45 +0800", "snippet": "健康的办公坐姿研究正确坐姿 脚面轻松接触地面，完全平放地面 check 小腿与大腿之间夹角大于等于90度 check 大腿超出椅面3公分到5公分 check 腰部下背部有支撑 cehck 颈椎有头枕支撑 check 身体与大腿角度 90~110度之间，越大腰部颈部压力越小 check 平视显示器，视线处于显示器中上段 手托不能太高，让大臂和小臂自然成90 ~ 110度之间的夹角，使肩部不要感受到压力和酸胀感 适当倾斜键盘托盘，让鼠标手和键盘更容易控制久坐有害健康 保持健康正确的坐姿，每次如果发现身体不自觉的改变为不健康的姿势，那么就证明需要其他活动，没40分钟坐姿办公..." }, { "title": "敏捷开发-Agile", "url": "/posts/roles-of-agile-team/", "categories": "实践, 敏捷开发", "tags": "Agile", "date": "2020-09-22 20:05:23 +0800", "snippet": "敏捷开发敏捷团队中的角色Business owner 行业客户，需求提出方Developer 开发工程师，开发需求并交付产品End user 端用户，产品面向用户BA Business Analyst - 业务分析员 负责理解并挖掘客户的需求，然后将需求转化为具体的 AC（Acceptance criteria, 验收标准） 作为 Business owner 和 Developer 直接的桥梁，将业务知识最大化的传递给 Developer ，保证工程师对业务准确的理解QA Quality Analyst - 质量分析师 Quality Assurance - 质量保证 ..." }, { "title": "MacOS配置", "url": "/posts/macos-configuration/", "categories": "规划, 工作流", "tags": "MacOS", "date": "2020-08-05 08:40:51 +0800", "snippet": "MacOS 配置I. 自动化组件部署1.1 ZSH1.1.1 zshrc .zshrc1.1.2 Oh My Zshdownload Oh My Zshvia curl1sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;via wget1sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh..." }, { "title": "cloud-qualification", "url": "/posts/cloud-qualification/", "categories": "体系结构-应用, 云计算", "tags": "CloudComputing", "date": "2020-07-26 13:30:07 +0800", "snippet": "云认证 学习&amp;amp;考试准备 学习路径 云计算基础 云服务器产品 云网络产品 CDN加速产品 云存储产品 数据库产品 安全产品 视频与通信服务 I. 云计算基础1.1 数据中心1.1.1 EDC TCO = CapEx + OpeEx + OppCost TVO = IT带来的业务价值与收益 L4 业务应用层 各种应用系统 L3 应用支撑层 中间件、消息、开发环境、API / 数据分析层 数据库 ..." }, { "title": "workflow工作流", "url": "/posts/workflow/", "categories": "规划, 工作流", "tags": "WorkFlow", "date": "2020-07-12 13:43:21 +0800", "snippet": "工作流规划1." }, { "title": "Git进阶", "url": "/posts/git-advanced/", "categories": "实践, 开发工具", "tags": "Git", "date": "2020-07-12 12:30:48 +0800", "snippet": "Git 进阶用法I. Git CLI 高级用法1. 重置头部指针1git reset {commitHash}/HEAD~{number} --hard 可以使用此命令重置当前提交的指针，将指针放在一个特定的提交上，如果想要远端达到相同的效果则需要 --force 强制推送远端，此命令生效后，会导致重置的哈稀值之前的提交都不在提交记录中 --hard表示强制重置1git reflog 使用reflog命令可以再次看到reset之前的提交的哈稀值，再次使用git reset可以重新回到之前的提交点2. 合并多次已同步远端的提交1git rebase -i {commitHash}/H..." }, { "title": "技术栈提升规划 [2020]", "url": "/posts/tech-stack-planning-2020/", "categories": "规划, 体系结构", "tags": "体系结构", "date": "2020-05-18 15:56:38 +0800", "snippet": "" }, { "title": "Career Planning", "url": "/posts/career-planning/", "categories": "规划, 职业规划", "tags": "Career-Planning", "date": "2020-05-18 11:30:25 +0800", "snippet": "职业规划 [Career Planning]阶段性职业规划I. 第一个阶段 &amp;lt;22-26岁&amp;gt;技术积累和方向确定基础技能和代码能力的构建 + 找到深耕技术领域 不断巩固计算机基础知识，并结合工作内容来拓宽技术栈，学会从基础理论和底层出发的思维去学习新技术和工具； 清楚的认识到自己想要深更的技术领域和方向； 方向：云计算、网络、数据；未来必然是网络和数据的时代，围绕网络和海量数据已经云计算的基础设施建设都是我的兴趣所在； 细分领域包括： 云计算基础设施架构领域 分布式架构和..." }, { "title": "Ansible自动化", "url": "/posts/ansible-automation/", "categories": "体系结构-应用, 自动化", "tags": "Ansible, Yaml, Python", "date": "2020-05-14 15:24:57 +0800", "snippet": "Ansible自动化学习路径 理解Ansible架构 安装配置Ansible, Inventory 理解playbook的原理 Ansible Ad-Hoc Commands Ansible 强大的模块 Ansible playbook编写 掌握编写自己的 Roles 使用Ansible管理集群Ansible Architecture 核心：ansible 核心模块（Core Modules）：这些都是ansible自带的模块  扩展模块（Custom Modules）：如果核心模块不足以完成某种功能，可以添加扩展模块 插件（Plugins）：完成模块功能的补充 ..." }, { "title": "Python服务容器化部署", "url": "/posts/python-service-deployment/", "categories": "实践, 需求实现", "tags": "Python, Docker", "date": "2020-05-14 15:03:28 +0800", "snippet": "监控容器微服务部署新增节点初始化操作 下载Docker环境部署文件，上传到物理机 将以上文件上传至同一目录下，执行如下： 准备日志 准备应用文件 Step0：获取监控物理机信息 Step1：初始化配置监控主机 Step2：部署+验证nmsagent镜像部署 下载Docker环境部署文件，上传到物理机 安装docker 导入镜像, 必须在两台物理机上都执行 准..." }, { "title": "Red Hat Enterprise Linux Kernel Version 2.6.32 3.8.13 python依赖环境手动部署", "url": "/posts/redhat-6.5-python-dependency/", "categories": "实践, 需求实现", "tags": "Red-Hat, Python", "date": "2020-05-14 14:56:51 +0800", "snippet": "Red Hat Enterprise Linux Kernel Version 2.6.32 3.8.13步骤 Download pkg files from test code Install needed pkg for redhat linux Upgrade Python interpreter to Version 2.7.5 Install pip and setuptools Install supervisor Install needed pip pkg0.Download pkg files from test code file_path: /opt/..." }, { "title": "监控系统1.5版本项目重组", "url": "/posts/monitor_system_restructure/", "categories": "实践, 需求实现", "tags": "Monitor-System", "date": "2020-05-14 14:52:45 +0800", "snippet": "监控系统1.5版本项目重组 采集数据处理接口添加逻辑：1234567891011121314151617181920&quot;&quot;&quot;DES: 监控项目数据处理入口 @API API = { &quot;/monitor_upload/snmp/&quot;: MonitorUploadAPI, } Key: 父级路由 Value: 父级路由对应的子路由 @MonitorUploadAPI MonitorUploadAPI = { &quot;xxx&quot;: {&quot;metric&quot;: &quot;x.xx&quot;, &quot;handl..." }, { "title": "时序数据完整性的方法巡检工具", "url": "/posts/data-patrol/", "categories": "实践, 需求实现", "tags": "Go, RabbitMQ, Data-Patrol", "date": "2020-05-13 17:46:51 +0800", "snippet": "程序设计时序图如图所示： 将监控数据接入消息队列后，监控数据可以进行多路复用，将监控数据接入审计工具；审计工具的主要功能包括： 监控数据每个采集间隔内的完整性； 监控数据是否发生完全丢失； 监控对象和其上报的监控指标是否覆盖全部初始配置。 审计工具的实现方式，将每个监控项的10个单位内的时间戳放在缓存栈内，每经过一个周期，各个栈对应的线程会做数据完整性的检查；检查结果会通过相应的事件存储在数据库中； 图为审计工具的时序图，图中以Golang的协程为基础单位，展示了数据处理的全部流程和并发情况； Consumer的协程会连接消息队列..." }, { "title": "Linux常用工具&amp;内置命令", "url": "/posts/linux-command-tools/", "categories": "体系结构-基础, Linux", "tags": "Linux", "date": "2020-05-13 17:17:18 +0800", "snippet": "Linux常用工具&amp;amp;内置命令Linux 工具箱I. 常用工具命令按路径检查磁盘利用率12345NAMEdu - estimate file space usageUSAGEdu -h --max-depth 1 | sort -hr快速杀掉某程序所有进程1ps -ef | grep {NAME} | awk -F &#39; &#39; &#39;{ print $2}&#39; | xargs kill -9清除DNS缓存1234567891011nscd -g #查看统计信息nscd -i passwdnscd -i groupnscd -i hostsrm -f ..." }, { "title": "pg数据库过程事务执行的锁竞争导致锁表", "url": "/posts/pg-dead-lock/", "categories": "实践, 需求实现", "tags": "PostgreSQL", "date": "2020-05-13 15:43:29 +0800", "snippet": "pg数据库过程事务执行的锁竞争导致锁表 问题描述：pg数据库200+进程在同一分钟内对过程事务进行访问，事务在执行过程中会先后竞争 exclusive 和 raw exclusive 两个锁，由于持有锁并等待锁导致数据库锁表（t_device）, 被锁数据表无法进行任何操作和访问；且连接无法释放导致数据库访问连接达到pool的max值；修复方案： 将mark_device的复杂过程事务改为 agent heart beat的心跳上报； 将监控设备的分配逻辑迁移到监控设备同步的功能上进行；查询SQL1234567select count(*) from pg_stat_activit..." }, { "title": "Data Sampling [Redis]", "url": "/posts/redis_data_sampling/", "categories": "实践, 需求实现", "tags": "Go, Redis, Data-Sampling", "date": "2020-05-13 14:54:35 +0800", "snippet": "监控覆盖率检查和数据完整性检查【2020-4】方案一，单节点方案二，可横向扩展集群方案：monitor-torrent负责与redis保持连接，对应key更新当前数据value和最新的timestamp及count进行++，数据模型为key = {endpoint} + {metric} + {tag} 注：遇到key中tag过长可以进行一定的压缩处理value 为redis-list 值都为redis-integer1) {value}2) {timestamp}3) {count}monitor-patrol 多个实例的情况下，需要考虑如何读取redis中的数据，如何触发读取；a..." }, { "title": "Python&amp;CPython核心", "url": "/posts/python-core/", "categories": "体系结构-语言, Python", "tags": "CPython, Python", "date": "2020-04-26 10:00:00 +0800", "snippet": "Python&amp;amp;CPython核心 “生成器与协程、CPython虚拟机原理、CPython解释器原理、内存管理与引用计数与优化、高级第三方库、Python语法魔术”CPython核心I. 虚拟机工作原理&amp;amp;CPython源代码&amp;amp;工作方式Evaluation Loop ceval.c Python虚拟机的 核心部分，迭代执行python字节码指令；迭代执行的实现依靠 for 循环； Python/ceval.c 模块，包含实现执行部分的核心代码，核心函数为 PyEval_EvalFrameEx，该函数中包含执行循环； ceval.c 模..." }, { "title": "Golang核心", "url": "/posts/golang-core/", "categories": "体系结构-语言, Golang", "tags": "Go", "date": "2020-04-26 10:00:00 +0800", "snippet": "Golang核心Go 类型决断和Reflect和Select" }, { "title": "I/O的多路复用算法", "url": "/posts/select-poll-epoll/", "categories": "体系结构-底层, Linux内核实现", "tags": "IO-Multiplexing, Select, Poll, Epoll", "date": "2020-04-20 10:00:00 +0800", "snippet": "I/O的多路复用算法 io-multiplexing: select/poll/epoll在 select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知。(此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在。)epoll的优点主要是一下几个方面： 监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件..." }, { "title": "现代操作系统", "url": "/posts/operating-system/", "categories": "体系结构-基础, 现代操作系统", "tags": "Operating-System, Linux", "date": "2020-04-20 10:00:00 +0800", "snippet": "现代操作系统 Unix/Linux 操作系统基本原理和源代码分析 A namespace in computer science (sometimes also called a name scope), is an abstract container or environment created to hold a logical grouping of unique identifiers or symbols (i.e. names). An identifier defined in a namespace is associated only with that name..." }, { "title": "生产环境TCP网络问题分析", "url": "/posts/tcp-network-analysis/", "categories": "实践, 问题分析", "tags": "TCP&IP, Network, Socket", "date": "2020-04-16 10:00:00 +0800", "snippet": "生产环境TCP网络问题分析服务集群的TCP网络问题分析，涉及大量TIME_WAIT原因分析及解决方案网络监控系统集群模型架构图4月9日突发问题原因分析 流量突增导致monitor_server服务端发送到OpenFalcon的请求大量超时 上报OpenFalcon请求超时的情况又导致server端大量socket的fd（连接描述符）指向的文件句柄大量处于close状态，导致server端不断地创建新的TCP连接，又由于短链接的问题导致了TIME_WAIT状态的TCP连接也大量激增； Socket_used，TCP_alloc，TIME_WAIT，在监控面板中..." }, { "title": "Linux Load Average 采样计算方法及源代码分析 [top]", "url": "/posts/linux-load-average/", "categories": "体系结构-底层, Linux内核实现", "tags": "TODO, Linux, Load-Average", "date": "2020-04-14 10:00:00 +0800", "snippet": "Linux Load Average 采样计算方法及源代码分析 [top]TODO" }, { "title": "论C/C++ HelloWorld 从代码到执行结束的生命周期", "url": "/posts/hello-world-life-cycle/", "categories": "体系结构-基础, 深入理解计算机系统", "tags": "TODO, HelloWorld", "date": "2020-04-13 10:00:00 +0800", "snippet": "论C/C++ HelloWorld 从代码到执行结束的生命周期TODO从编译原理&amp;amp;虚拟内存&amp;amp;异常陷阱&amp;amp;系统调用，分析并实践每个细节的产物" }, { "title": "CPython源代码分析&amp;虚拟机原理", "url": "/posts/cpython-implementation/", "categories": "体系结构-底层, Python虚拟机底层实现", "tags": "CPython", "date": "2020-04-13 10:00:00 +0800", "snippet": "CPython源代码分析&amp;amp;虚拟机原理结合编译原理&amp;amp;CSAPP理解CPython底层实现，分支v3.8及v2.7本地追踪分支 master / 2.7 / 2.8进入源代码分析之前 CPython是python的解释器实现之一 CPython在广义上讲，就是”执行程序的程序“ 但是与传统静态语言（C）编译驱动程序不同的是 C程序声明周期简介（简单介绍，核心知识点在此处不展开） C源代码经过预处理、编译、汇编、链接，最终生成可执行二进制，该二进制包含一系列的节，对应机器代码段、格式串、开关语句跳转表、全..." }, { "title": "核心知识库", "url": "/posts/core-knowledge/", "categories": "体系结构-基础, 核心知识", "tags": "Core-Knowledge", "date": "2020-04-12 10:00:00 +0800", "snippet": "核心知识库2020核心知识体系，基础知识+上层应用+实践能力，2020年2、3、4月学习复习总结2020 核心知识体系2020 全年学习计划和路径目录I. 计算机基础知识 高级编程语言 C/C++ Golang Python Shell编程 计算机网络 应用层 OSI中7层 运输层 OSI中4层 网络层 OSI中3层 链路层 OSI中2层 物理层 OSI中1层 TCP/IP网络模型/五层网络 网络建设：三层网络，二层网络，核心，接入，汇聚 ..." }, { "title": "C/C++ Syntactic sugar 语法糖", "url": "/posts/c-cpp-syntactic-sugar/", "categories": "体系结构-语言, C&C++", "tags": "C&C++, Syntactic-Sugar", "date": "2020-04-10 10:00:00 +0800", "snippet": "C/C++ Syntactic sugar 语法糖1234567891011121314151617181920212223242526//Syntactic sugar#include &amp;lt;iostream&amp;gt;using namespace std;int main() { // 语法糖 int a = 0; int b = (a++); cout &amp;lt;&amp;lt; &quot;a: &quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &quot;, b: &quot; &amp;lt;&amp;lt; b &a..." }, { "title": "Kubernetes &amp; Docker", "url": "/posts/kubernetes-curve/", "categories": "体系结构-应用, 容器", "tags": "TODO, Kubernetes, Docker", "date": "2020-04-10 10:00:00 +0800", "snippet": "Kubernetes &amp;amp; Dockerhttps://kubernetes.io/ Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications; kubernetes components architecture 控制面 控制平面，用来对整个集群作出决策，并监测和响应集群产生的事件； 控制平面的组件可以运行再一台或者多台机器上，默认的部署脚本，提供所有控制..." }, { "title": "RPC-gRPC", "url": "/posts/rpc-grpc/", "categories": "体系结构-应用, 远端过程调用", "tags": "TODO, RPC, gRPC", "date": "2020-04-09 10:00:00 +0800", "snippet": "RPC-gRPCgPRC open-source RPC framework" }, { "title": "linux signal", "url": "/posts/man-signal/", "categories": "体系结构-基础, Linux", "tags": "TODO, Man-Signal", "date": "2020-04-09 10:00:00 +0800", "snippet": "linux signalman-signal" }, { "title": "Prometheus", "url": "/posts/Prometheus/", "categories": "体系结构-应用, 监控系统", "tags": "TODO, Prometheus, OpenSource, Go", "date": "2020-04-06 10:00:00 +0800", "snippet": "Prometheusprometheus.io Prometheus生态系统架构图 ecosystem components architecture 基本流程： Prometheus Server从“采集器” Jobs / Exporters 中收集指标数据 Server同时会从推送网关“收集” 生命周期较短的任务采集指标 Server将数据指标存储在本地的，并进行一些规则匹配来对这些data，按照时间序列对数据和记录进行汇总，或者生成告警； Prometheus可以对接Grafana进行时序数据的界面化展示-Dashboard； ..." }, { "title": "Redis学习及源码分析", "url": "/posts/Redis/", "categories": "体系结构-应用, 中间件", "tags": "TODO, Redis", "date": "2020-04-06 10:00:00 +0800", "snippet": "Redis学习及源码分析编译安装CentOS Linux release 7.4.1708 (Core) redis官网下载最新稳定版 安装链接所需静态库 libhiredis libjemalloc liblua / lua-static 使用make 调用gcc驱动程序进行编译、链接并生成可执行二进制文件 make_file 在src目录下； 在没有安装支持版本的情况下，编译后无法连接，需要删除重定向文件进行重新编译和汇编； 启动运行 进入 utils 目录，运行 ./install_se..." }, { "title": "Python性能分析和火焰图", "url": "/posts/python-performance-flame-graph/", "categories": "体系结构-语言, Python", "tags": "Python, Flamegraph", "date": "2020-04-05 10:00:00 +0800", "snippet": "Python性能分析和火焰图cProfile和profile为python程序提供的性能分析工具 profile提供一组统计信息，用来描述对于一个函数或者一个代码块的被调用次数或者执行次数和执行所花费的时间； 对于这些统计信息，可以使用python的pstats模块，使用不同类型的参数进行输出，或者使用第三方的模块输入火焰图，例如frameprof； python2.7-cProfile使用方式 运行命令中添加cProfile模块，来生产统计信息python -m cProfile [-o output_file] [-s sort_order] myscript.py ..." }, { "title": "Golang性能分析和监控", "url": "/posts/golang-performance-flame-graph/", "categories": "体系结构-语言, Golang", "tags": "Go, Go-pprof, Flamegraph", "date": "2020-04-05 10:00:00 +0800", "snippet": "Golang性能分析和监控tool pprof 和 package pprof1234567* [pprof](https://golang.org/pkg/runtime/pprof/)* 通过HTTP服务提供运行时的性能分析数据（统计数据）* 通过使用go tool pprof可以对数据进行特殊的格式化，以满足分析需求* 包导入的方式 * `import &quot;net/http/pprof&quot;`* http定位器访问方式 * `/debug/pprof`实践过程1234567891011121314151617181920212223242526272829..." }, { "title": "红黑树&amp;B树应用及索引原理", "url": "/posts/b-tree-and-indexing-principle/", "categories": "体系结构-基础, 算法导论", "tags": "B+Tree, B-Tree, Red-Black-Tree, MySQL, Algorithm", "date": "2020-04-02 10:00:00 +0800", "snippet": "红黑树&amp;amp;B树应用及索引原理算法导论（第三版）学习笔记 红黑树 + B树部分第13章 红 黑 树 二叉搜索树的基本动态集合操作，该二叉搜索树的高度为h SEARCH PREDECESSOR SUCCESSOR MINIMUN MAXIMUM INSERT DELETE 以上操作的时间复杂度为O(h)，对于高度较低的二叉搜索树，操作执行较快，但是当树高度较高时，这些集合操作可能并不比链表上执行的要快 红黑树 red-black tree 可以保证最坏情况下的基本动..." }, { "title": "海量数据程序设计思路", "url": "/posts/iter-massive-data-programming/", "categories": "实践, 面试总结", "tags": "Iterview", "date": "2020-03-29 10:00:00 +0800", "snippet": "海量数据程序设计思路 massive-data-programmingbitmap 位图 存储方式属于hash bitmap是将原本需要占用1个字节或者多个字节的整数，转化成对一个字节单位中的一个确定位置的比特的占用 如有： 1234567891011121314151617181920212223242526272829303132333435363738int array[] = {1, 2, 3, 4, 5} //使用int型数组存储的数据在内存中，以32位整型为例，需要占用20个字节的空间//使用bitmap#i..." }, { "title": "algorithm-heap 堆排序的实现", "url": "/posts/algorithm-heap/", "categories": "体系结构-基础, 算法导论", "tags": "Algorithm, Heap", "date": "2020-03-29 10:00:00 +0800", "snippet": "algorithm-heap 堆排序的实现合并2个有序序列，合并n个有序序列相关算法回顾合并2个有序链表为一个有序链表 比对l1和l2的大小，将最小的放在新链表的next上，更新l1或者l2，直到其中一个链表为空 while l1 and l2；最终返回新链表的next。T = M + N合并n个有序链表为一个有序链表 基于两个链表合并的算法，我们将k中每两个链表合并一次得出的新的集合再进行同样的操作，最终得到一个集合，T = kN 将 k 个链表配对并将同一对中的链表合并。第一轮合并以后， k 个链表被合并成了 k/2 个链表，平均长度为 2N/k 重复这一过程，直到我们得到了最终..." }, { "title": "Python进程内存分析&amp;大量内存占用的优化方案", "url": "/posts/CPython-malloc-python-gc/", "categories": "体系结构-语言, Python", "tags": "GDB-gcc-debug, jemalloc, ptmalloc2, TCMalloc", "date": "2020-03-29 10:00:00 +0800", "snippet": "Python进程内存分析&amp;amp;大量内存占用的优化方案CPython预编译运行库 python-debuginfo-2.7.5-86.el7.x86_64 glibc-debuginfo-common-2.17-292.el7.x86_64 python-debuginfo-2.7.5-86.el7.x86_64 monitor-server 内存分析，大量内存占用的优化方案1. 当前程序状态 物理机 1234417593 root 20 0 4325700 1.946g 6724 S 8.9 0.8 891:53.36 ..." }, { "title": "深入理解计算机系统 [Computer-Systems-A-Programmer&#39;s-Perspective]", "url": "/posts/csapp/", "categories": "体系结构-基础, 深入理解计算机系统", "tags": "CSAPP, Computer-Systems", "date": "2020-03-27 10:00:00 +0800", "snippet": "Computer Systems A Programmer’s PerspectiveCSAPP 从程序员的角度学习计算机系统如何工作 学习的方法： do it，在真正的系统上解决具体的问题 文中代码GCC编译的C程序并在Linux系统上测试 概述 第一章，研究简单的程序的声明周期；介绍计算机系统的主要概念和主题； 第二章，计算机算数运算、补码、数学属性； 第三章， 第四章， 第五章， 第六章， 第七章第一章，计算机系统漫游 如何优化C代码，以充分利用现代处理器和存储器系统的设计 编译器如何实现过程调用 如何避免缓冲区溢出 如何识别和避免链接时的错误 编写..." }, { "title": "Python内存管理的底层实现&amp;程序内存分析", "url": "/posts/python-memory-management-implementation/", "categories": "体系结构-底层, Python虚拟机底层实现", "tags": "CPython, Python-gcc", "date": "2020-03-25 10:00:00 +0800", "snippet": " 问题1：python内存管理，cpython内存管理部分的代码 问题2：tornado线程管理，htop问题 问题3：python内存debug 问题4：gcc debug " }, { "title": "理解C/C++中的指针和引用", "url": "/posts/pointer-reference-understanding/", "categories": "体系结构-语言, C&C++", "tags": "C&C++, Pointer", "date": "2020-03-25 10:00:00 +0800", "snippet": "C的指针 Pointer_C指针_C++指针_Golang指针 内存的硬件在软件层面的抽象 一维线性，M个连续的1个字节大小的单元组成的数组，每个字节有连续且唯一的物理地址 Physical Address CPU访问内存最自然的方式就是物理寻址（physical addressing） 大于一个字节的数据类型会被连续的存储在多个内存地址中，任然只用一个地址来寻址 每个位置有独一无二的地址用来寻址 每个地址都存放了一个值 体系结构，深入理解计算机操作系统，第九章，虚拟内存 ..." }, { "title": "tornado框架学习及源码分析", "url": "/posts/understanding-of-tornado/", "categories": "体系结构-语言, Python", "tags": "TODO, Python, Tornado", "date": "2020-03-24 10:00:00 +0800", "snippet": "" }, { "title": "Python实现动态生成类的http接口-monitor动态监控项", "url": "/posts/Python-dynamic-map/", "categories": "实践, 需求实现", "tags": "Python", "date": "2020-03-24 10:00:00 +0800", "snippet": "项目背景 采集厂商网络硬件设备基础指标，封装OpenFalcon数据结构 参与开发人数：1人监控系统动态监控 需要实现的目标： 数据库监控表项动态管理监控项数据处理、封装接口 新增监控项由对于处理规则处理，项目的新监控项开发只需要编写规则函数和录入监控项字段即可 1. API 处理和报文解析 项目启动，导入文件后，解释器会执行 RouteRegister.registerAPI() 文件路经 monitor/monitor-server/monitor/api/metric_api/dynamic_router_api.py 从数据库获取..." }, { "title": "Linux网络基础", "url": "/posts/linux-networking/", "categories": "体系结构-基础, Linux", "tags": "TODO, Linux, Network", "date": "2020-03-16 10:00:00 +0800", "snippet": "Linux Network1. TCP连接状态中大量客户处于TIME_WAIT2. Linux的套接字线程为了实现客户端请求的快速相应和快速处理，据是高并发，则必须使用多线程机制。主题思想是：serversocket通过accept建立一个socket，然后起一个线程，把这个socket扔给新建的线程进行处理，而serversocket所在的主线程，则继续去监听端口，以此实现多线程通信Linux中的ipv6 实际上是可以处理 ipv4 的请求的当 V6ONLY 没有开启的时候，反之不然； If we have the unspecified IPv4 address (0.0.0.0)..." }, { "title": "计算机网络", "url": "/posts/network-curve/", "categories": "体系结构-基础, 计算机网络", "tags": "Network", "date": "2020-03-16 10:00:00 +0800", "snippet": "计算机网络基础 基础复习计算机网络自顶向下Top DownOSI ApplicationPresentationSessionTransportNetworkData LinkPhysicalSimple ApplicationTransportNetworkLinkPhysical1. 计算机网络构成因特网的软件和硬件，根据分布式应用提供服务的联网基础设施来描述因特网 世界范围内的计算机网络因特网就是将端系统彼此互联1.1 具体构成和描述端系统，分组Packet 所有连接的设备，叫做主机或者端系统 HOST END SYSTEM 端系统通过通信链路communication..." }, { "title": "C programming language recap", "url": "/posts/c-programming-language-recap/", "categories": "体系结构-语言, C&C++", "tags": "C&C++", "date": "2020-03-16 10:00:00 +0800", "snippet": "C recapThis file is a recap of programming language C, prepare for C++ learning#include &amp;lt;stdio.h&amp;gt; // 引入包含头文件int main() { // main 是程序执行的开始 printf(&quot;%s\\n&quot;, &quot;shit happens&quot;); return 1;}通用高级语言，为Unix操作系统设计，以B语言为基础 结构化 处理底层活动 C11，ISO标准 /* GCCc源代码经过编译转为机器语言（CPU指令）免费开..." }, { "title": "知识碎片", "url": "/posts/capsule/", "categories": "实践, 碎片胶囊", "tags": "Capsule", "date": "2020-03-02 10:00:00 +0800", "snippet": "Python1. python数组反转123list(reversed(a)) #reversed(a)返回的是迭代器，所以前面加个list转换为listsorted(a,reverse=True)a[: :-1] #其中[::-1]代表从后向前取值，每次步进值为12. 类继承 class 关键字 使用 class 关键字修改实例的类型引用Linux1. proc目录下cpuinfo检查 查看 CPU 物理个数　　grep &#39;physical id&#39; /proc/cpuinfo | sort -u | wc -..." }, { "title": "KMP算法&amp;确定有限状态自动机或确定有限自动机 [From KMP and RE to DFA]", "url": "/posts/kmp-dfa/", "categories": "体系结构-理论, 论文期刊", "tags": "TODO, Algorithm", "date": "2020-03-02 10:00:00 +0800", "snippet": "" }, { "title": "确定有限状态自动机或确定有限自动机 [deterministic finite automaton, DFA]", "url": "/posts/deterministic-finite-automaton/", "categories": "体系结构-基础, 自动机导论", "tags": "DFA", "date": "2020-03-02 10:00:00 +0800", "snippet": "" }, { "title": "图灵机-可计算理论", "url": "/posts/Turing-machine/", "categories": "体系结构-理论, 论文期刊", "tags": "TODO", "date": "2020-03-02 10:00:00 +0800", "snippet": "图灵机-图灵完备图灵机所能解决问题" }, { "title": "My Algorithm Curve", "url": "/posts/Algorithm-curve/", "categories": "实践, 算法训练", "tags": "Algorithm", "date": "2020-03-02 10:00:00 +0800", "snippet": "做题路径-重要算法思想##EASY： 两数之和，目标值是数组中两个数字的和，求这两数字 用dp保存遍历结果，遍历数组，获取目标值和遍历值的差值，在dp中找是否存在该值 =N排序，双指针不断更新靠近目标值 =NlogN 罗马数字转整数 遍历输入串，将罗马数字转化成数字并append到一个暂存list中，下一次判断list最后一位是否和罗马数字相减要求的一致，pop掉，并将新数字减掉1 10 100，最终对list中的int相加 n以内所有素数的数量，n是不是素数 埃式筛法，从i**2开始+=i，筛掉，最终留..." }, { "title": "Algorithm Everything", "url": "/posts/Algorithm-Everything/", "categories": "实践, 算法训练", "tags": "Algorithm", "date": "2020-02-18 10:00:00 +0800", "snippet": "经验1. 提问 主要负责内容 云网络监控 具体项目描述 什么样的架构 server+agent的分布式架构，每个可用去会规划两台裸金属的物理机作为监控agent节点，每台物理机会启动多个agent将采集压力负载到每个agent上，并且agent采用了心跳模式的高可用和监控； 用了什么框架 server使用的是python2的tornado框架tornado框架和核心是什么 epollepoll linux: linux多路复用技术可以处理数以百万计的socket句柄po..." }, { "title": "BeginningOf2020 - Algorithm", "url": "/posts/Beginning-of-2020-Algorithm/", "categories": "实践, 算法训练", "tags": "BeginningOf2020, Algorithm", "date": "2020-01-20 10:00:00 +0800", "snippet": "12345678910111213141516171819202122232425262728293031323334# [47] 全排列 II## @lc code=startclass Solution(object): def permuteUnique(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: List[List[int]] &quot;&quot;&quot; def do_swap(l, start, end): ..." }, { "title": "思维方法论", "url": "/posts/systematic-methodology/", "categories": "规划, 思维方法论", "tags": "体系结构", "date": "2020-01-01 00:00:00 +0800", "snippet": "思维方法论" }, { "title": "体系结构-树", "url": "/posts/cs-communication-physical-architecture/", "categories": "规划, 体系结构", "tags": "体系结构", "date": "2020-01-01 00:00:00 +0800", "snippet": "体系结构-树1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556├── 体系结构│   ├── 基础│   │   ├── 深入理解计算机系统[CSAPP]│   │   │   ├── 存储结构│   │   │   ├── 虚拟内存│   │   │   ├── 链接│   │   │   ├── 并发│   │   │   └── 网络│   │   ├── 计算机网络│   │   │   └── 链路│   │   ├── 现..." }, { "title": "SumOf2019 - RabbitMQ", "url": "/posts/Sum-of-2019-RabbitMQ/", "categories": "体系结构-应用, 消息队列", "tags": "SumOf2019, RabbitMQ", "date": "2019-12-01 10:00:00 +0800", "snippet": "" }, { "title": "SumOf2019 - MonitorSystemArchitecture", "url": "/posts/Sum-of-2019-MonitorSystemArchitecture/", "categories": "实践, 架构设计", "tags": "SumOf2019, MonitorSystemArchitecture", "date": "2019-12-01 10:00:00 +0800", "snippet": "" }, { "title": "SumOf2019 - DistributedMonitorSystem", "url": "/posts/Sum-of-2019-DistributedMonitorSystem/", "categories": "实践, 架构设计", "tags": "SumOf2019, DistributedMonitorSystem", "date": "2019-12-01 10:00:00 +0800", "snippet": "" }, { "title": "SumOf2019 - DataInfluxPatrol", "url": "/posts/Sum-of-2019-DataInfluxPatrol-Golang/", "categories": "实践, 需求实现", "tags": "SumOf2019, DataInfluxPatrol-Golang", "date": "2019-12-01 10:00:00 +0800", "snippet": "DataInfluxPatrol-Golang Q: What is the method of analyzing high influx data coverage ?The implementation of high influx data coverage analyzer1. Foundament of Architecture" }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "In Chirpy, the image files of Favicons are placed in assets/img/favicons/. You may need to replace them with your own. So let’s see how to customize these Favicons.Whit a square image (PNG, JPG or GIF) in hand, open the site Favicon &amp;amp; App Icon Generator and upload your original image.Clic..." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the Jekyll Docs to complete the installtion of basic environment (Ruby , RubyGems and Bundler).To improve the writing experience, we need to use some script tools. If your machine is running Debian or macOS, make sure that GNU coreutils is installed. Otherwise, install by: De..." }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "Naming and PathCreate a new file named with the format YYYY-MM-DD-title.md then put it into _post of the root directory.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:123456---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CA..." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This Jekyll template totally compatible with Markdown syntax. Now, let’s take a look for the text and typography in this theme.TitlesH1H2H3H4ParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, be..." }, { "title": "Learning Golang", "url": "/posts/golang-note/", "categories": "体系结构-语言, Go", "tags": "Go", "date": "2019-02-20 10:00:00 +0800", "snippet": "1. Basic syntax variable 123456// in methodi := &quot;this is a string&quot;// out of methodvar i stringvar cur_time, last_time stringvar cur_count, last_count string const```123. typestringmapint```" }, { "title": "RabbitMQ &amp; AMQP", "url": "/posts/RabbitMQ-pub-sub/", "categories": "体系结构-应用, 消息队列", "tags": "RabbitMQ", "date": "2019-02-20 10:00:00 +0800", "snippet": "RabbitMQ" }, { "title": "V2ray Nginx 配置", "url": "/posts/V2ray-Websocket-Nginx/", "categories": "实践, 实践记录", "tags": "V2ray", "date": "2018-12-05 12:00:00 +0800", "snippet": "V2ray Nginx 配置 “Nginx内网转发，https证书配置，V2ray代理配置”V2ray installation and nginx setupSimple Installation process 配置一个域名，提前配置DNS解析 1domain=&quot;&quot; 安装V2ray二进制，提前配置YUM源，makecache，安装wget, nginx, socat 1wget https://install.direct/go.sh &amp;amp;&amp;amp; bash go.sh 生成https证书，cer..." }, { "title": "Algorithm Matrix", "url": "/posts/Algorithm-matrix/", "categories": "实践, 算法训练", "tags": "Algorithm", "date": "2018-10-26 18:00:00 +0800", "snippet": "Algorithm requeirment get shortest distance from 0 node for every non 0 node, save the value to the index of non 0 node, generate new matrix.Implementation12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/usr/bin/pythonimpor..." }, { "title": "PostgreSQL fundamental and operation", "url": "/posts/PostgreSQL/", "categories": "体系结构-基础, 数据库系统概念", "tags": "Postgresql", "date": "2018-10-23 19:00:00 +0800", "snippet": "What is object-ralational database management system - aka ORDMS SQL standard databasefeatures: complex queries foreign keys triggers updatable views transactional integrity multiversion concurrency controlextended features: data types functions operators aggregate functions index me..." }, { "title": "Postgresql HA &amp; Loadblance - pgpool II", "url": "/posts/Postgresql-pgpool/", "categories": "实践, 实践记录", "tags": "Postgresql, Pgpool", "date": "2018-10-23 19:00:00 +0800", "snippet": "Optional Solution corosync &amp;amp; pacemaker &amp;amp; heartbeat script POC failed, centos 7.2 x64 pgpool II (middleware) &amp;amp; failover script &amp;amp; recovery script POC … processing POCEnvCentOS 7.2 x64Installation postgresql 9.6 pgpool II 96 v3.6.12Ver..." }, { "title": "通过 ulimit 改善系统性能", "url": "/posts/Linux-Ulimit/", "categories": "实践, 实践记录", "tags": "Linux", "date": "2018-10-22 12:00:00 +0800", "snippet": "通过 ulimit 改善系统性能ulimit:ulimit用于限制shell启动进程所占用的资源 所创建的内核文件的大小 进程数据快的大小 shell进程创建文件的大小 内存锁住的大小 常驻内存集的大小 打开文件描述符的数量 分配堆栈的最大大小 CPU时间 单个用户最大线程数 shell进程所能使用的最大虚拟内存 硬资源和软资源的限制 使用方式 登录shell到终止会话之间，对资源进行限制 写入文件，可以针对特定用户，进行长期固定的限制 ulimit –help有效范围 作用范围：作用于用户当前shell进程派生的子进程修改系统文件..." }, { "title": "V2ray TLS WebSocket HTTPS + Nginx 内网转发", "url": "/posts/V2ray-TLS-Web/", "categories": "实践, 实践记录", "tags": "V2ray, Nginx", "date": "2018-09-28 10:00:00 +0800", "snippet": "V2ray TLS WebSocket Deploy1. CentOS compution instance Google Cloud2. Install V2ray Client123wget https://install.direct/go.shbash go.sh Need Synchronize date timentpdate us.pool.ntp.org" } ]
